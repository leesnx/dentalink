import{a as n}from"./app-JcAsAuql.js";import{S as s}from"./sweetalert2.esm.all-acGi8jXx.js";n.defaults.withCredentials=!0;n.defaults.headers.common["X-Requested-With"]="XMLHttpRequest";const m=()=>{var i,t,e;return((i=document.querySelector('meta[name="csrf-token"]'))==null?void 0:i.getAttribute("content"))||((t=window.Laravel)==null?void 0:t.csrfToken)||((e=document.querySelector('input[name="_token"]'))==null?void 0:e.value)};n.defaults.headers.common["X-CSRF-TOKEN"]=m();n.interceptors.request.use(i=>{const t=m();return t&&(i.headers["X-CSRF-TOKEN"]=t),i});n.interceptors.response.use(i=>i,i=>{var t,e;return((t=i.response)==null?void 0:t.status)===419?s.fire({icon:"error",title:"Session Expired",text:"Please refresh the page and try again.",confirmButtonColor:"#3B82F6"}).then(()=>{window.location.reload()}):((e=i.response)==null?void 0:e.status)===403&&s.fire({icon:"error",title:"Access Denied",text:"You do not have permission to perform this action.",confirmButtonColor:"#3B82F6"}),Promise.reject(i)});class f{constructor(){}async getDashboardStats(){try{return(await n.get("/api/dashboard/stats")).data}catch(t){throw console.error("Error fetching staff dashboard stats:",t),t}}async getDashboardData(){try{return(await n.get("/api/dashboard/data")).data}catch(t){throw console.error("Error fetching dashboard data:",t),t}}async getRecentActivity(){try{return(await n.get("/api/dashboard/recent-activity")).data}catch(t){throw console.error("Error fetching recent activity:",t),t}}async getPatients(t={}){try{return(await n.get("/patients",{params:t})).data}catch(e){throw console.error("Error fetching patients:",e),e}}async getPatient(t){try{return(await n.get(`/patients/${t}`)).data}catch(e){throw console.error("Error fetching patient:",e),e}}async createPatient(t){var e,a,o,r;try{const c=await n.post("/patients",t);return await s.fire({icon:"success",title:"Success!",text:"Patient created successfully.",confirmButtonColor:"#10B981",timer:3e3}),c.data}catch(c){const p=((a=(e=c.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to create patient.",l=((r=(o=c.response)==null?void 0:o.data)==null?void 0:r.errors)||{};let u=p;throw Object.keys(l).length>0&&(u+=`

Validation errors:
`,Object.keys(l).forEach(d=>{u+=`• ${l[d][0]}
`})),await s.fire({icon:"error",title:"Error Creating Patient",text:u,confirmButtonColor:"#EF4444"}),c}}async updatePatient(t,e){var a,o;try{const r=await n.patch(`/patients/${t}`,e);return await s.fire({icon:"success",title:"Success!",text:"Patient updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),r.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to update patient.";throw await s.fire({icon:"error",title:"Error Updating Patient",text:c,confirmButtonColor:"#EF4444"}),r}}async getAppointments(t={}){try{return(await n.get("/appointments",{params:t})).data}catch(e){throw console.error("Error fetching appointments:",e),e}}async getAppointment(t){try{return(await n.get(`/appointments/${t}`)).data}catch(e){throw console.error("Error fetching appointment:",e),e}}async createAppointment(t){var e,a;try{const o=await n.post("/appointments",t);return await s.fire({icon:"success",title:"Success!",text:"Appointment created successfully.",confirmButtonColor:"#10B981",timer:3e3}),o.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to create appointment.";throw await s.fire({icon:"error",title:"Error Creating Appointment",text:r,confirmButtonColor:"#EF4444"}),o}}async updateAppointment(t,e){var a,o;try{const r=await n.patch(`/appointments/${t}`,e);return await s.fire({icon:"success",title:"Success!",text:"Appointment updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),r.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to update appointment.";throw await s.fire({icon:"error",title:"Error Updating Appointment",text:c,confirmButtonColor:"#EF4444"}),r}}async checkInAppointment(t){var e,a;try{const o=await n.post(`/appointments/${t}/check-in`);return await s.fire({icon:"success",title:"Checked In!",text:"Patient checked in successfully.",confirmButtonColor:"#10B981",timer:2e3}),o.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to check in patient.";throw await s.fire({icon:"error",title:"Check-in Failed",text:r,confirmButtonColor:"#EF4444"}),o}}async completeAppointment(t,e=""){var a,o;try{const r=await n.post(`/appointments/${t}/complete`,{completion_notes:e});return await s.fire({icon:"success",title:"Completed!",text:"Appointment completed successfully.",confirmButtonColor:"#10B981",timer:2e3}),r.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to complete appointment.";throw await s.fire({icon:"error",title:"Error Completing Appointment",text:c,confirmButtonColor:"#EF4444"}),r}}async cancelAppointment(t,e=""){var a,o;try{const r=await s.fire({icon:"warning",title:"Cancel Appointment",text:"Are you sure you want to cancel this appointment?",input:"textarea",inputPlaceholder:"Cancellation reason (optional)",inputValue:e,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, cancel it!",cancelButtonText:"Keep appointment"});if(!r.isConfirmed)return null;const c=await n.post(`/appointments/${t}/cancel`,{cancellation_reason:r.value||"No reason provided"});return await s.fire({icon:"success",title:"Cancelled!",text:"Appointment has been cancelled.",confirmButtonColor:"#10B981",timer:2e3}),c.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to cancel appointment.";throw await s.fire({icon:"error",title:"Error Cancelling Appointment",text:c,confirmButtonColor:"#EF4444"}),r}}async getAvailableSlots(t){try{return(await n.get("/appointments/available-slots",{params:t})).data}catch(e){throw console.error("Error fetching available slots:",e),e}}async getPatientRecords(t={}){try{return(await n.get("/patient-records",{params:t})).data}catch(e){throw console.error("Error fetching patient records:",e),e}}async getPatientRecord(t){try{return(await n.get(`/patient-records/${t}`)).data}catch(e){throw console.error("Error fetching patient record:",e),e}}async createPatientRecord(t){var e,a,o,r;try{const c=await n.post("/patient-records",t);return await s.fire({icon:"success",title:"Success!",text:"Patient record created successfully.",confirmButtonColor:"#10B981",timer:3e3}),c.data}catch(c){const p=((a=(e=c.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to create patient record.",l=((r=(o=c.response)==null?void 0:o.data)==null?void 0:r.errors)||{};let u=p;throw Object.keys(l).length>0&&(u+=`

Validation errors:
`,Object.keys(l).forEach(d=>{u+=`• ${l[d][0]}
`})),await s.fire({icon:"error",title:"Error Creating Record",text:u,confirmButtonColor:"#EF4444"}),c}}async updatePatientRecord(t,e){var a,o;try{const r=await n.patch(`/patient-records/${t}`,e);return await s.fire({icon:"success",title:"Success!",text:"Patient record updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),r.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to update patient record.";throw await s.fire({icon:"error",title:"Error Updating Record",text:c,confirmButtonColor:"#EF4444"}),r}}async deletePatientRecord(t,e=""){var a,o;try{if(!(await s.fire({icon:"warning",title:"Delete Patient Record",text:`Are you sure you want to delete this record for ${e}? This action cannot be undone.`,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it!",cancelButtonText:"Cancel"})).isConfirmed)return null;const c=await n.delete(`/patient-records/${t}`);return await s.fire({icon:"success",title:"Deleted!",text:"Patient record has been deleted successfully.",confirmButtonColor:"#10B981",timer:3e3}),c.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to delete patient record.";throw await s.fire({icon:"error",title:"Error Deleting Record",text:c,confirmButtonColor:"#EF4444"}),r}}async getTreatmentPlans(t={}){try{return(await n.get("/treatment-plans",{params:t})).data}catch(e){throw console.error("Error fetching treatment plans:",e),e}}async getTreatmentPlan(t){try{return(await n.get(`/treatment-plans/${t}`)).data}catch(e){throw console.error("Error fetching treatment plan:",e),e}}async createTreatmentPlan(t){var e,a;try{const o=await n.post("/treatment-plans",t);return await s.fire({icon:"success",title:"Success!",text:"Treatment plan created successfully.",confirmButtonColor:"#10B981",timer:3e3}),o.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to create treatment plan.";throw await s.fire({icon:"error",title:"Error Creating Treatment Plan",text:r,confirmButtonColor:"#EF4444"}),o}}async updateTreatmentPlan(t,e){var a,o;try{const r=await n.patch(`/treatment-plans/${t}`,e);return await s.fire({icon:"success",title:"Success!",text:"Treatment plan updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),r.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to update treatment plan.";throw await s.fire({icon:"error",title:"Error Updating Treatment Plan",text:c,confirmButtonColor:"#EF4444"}),r}}async approveTreatmentPlan(t){var e,a;try{if(!(await s.fire({icon:"question",title:"Approve Treatment Plan",text:"Are you sure you want to approve this treatment plan?",showCancelButton:!0,confirmButtonColor:"#10B981",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, approve it",cancelButtonText:"Cancel"})).isConfirmed)return null;const r=await n.post(`/treatment-plans/${t}/approve`);return await s.fire({icon:"success",title:"Approved!",text:"Treatment plan has been approved.",confirmButtonColor:"#10B981",timer:2e3}),r.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to approve treatment plan.";throw await s.fire({icon:"error",title:"Error Approving Plan",text:r,confirmButtonColor:"#EF4444"}),o}}async startTreatmentPlan(t){var e,a;try{if(!(await s.fire({icon:"question",title:"Start Treatment Plan",text:"Are you sure you want to start this treatment plan?",showCancelButton:!0,confirmButtonColor:"#3B82F6",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, start it",cancelButtonText:"Cancel"})).isConfirmed)return null;const r=await n.post(`/treatment-plans/${t}/start`);return await s.fire({icon:"success",title:"Started!",text:"Treatment plan has been started.",confirmButtonColor:"#10B981",timer:2e3}),r.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to start treatment plan.";throw await s.fire({icon:"error",title:"Error Starting Plan",text:r,confirmButtonColor:"#EF4444"}),o}}async completeTreatmentPlan(t){var e,a;try{if(!(await s.fire({icon:"question",title:"Complete Treatment Plan",text:"Are you sure you want to mark this treatment plan as complete?",showCancelButton:!0,confirmButtonColor:"#10B981",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, complete it",cancelButtonText:"Cancel"})).isConfirmed)return null;const r=await n.post(`/treatment-plans/${t}/complete`);return await s.fire({icon:"success",title:"Completed!",text:"Treatment plan has been marked as complete.",confirmButtonColor:"#10B981",timer:2e3}),r.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to complete treatment plan.";throw await s.fire({icon:"error",title:"Error Completing Plan",text:r,confirmButtonColor:"#EF4444"}),o}}async getServices(t={}){try{return(await n.get("/services",{params:t})).data}catch(e){throw console.error("Error fetching services:",e),e}}async getService(t){try{return(await n.get(`/services/${t}`)).data}catch(e){throw console.error("Error fetching service:",e),e}}async getFinancialRecords(t={}){try{return(await n.get("/financial-records",{params:t})).data}catch(e){throw console.error("Error fetching financial records:",e),e}}async getFinancialRecord(t){try{return(await n.get(`/financial-records/${t}`)).data}catch(e){throw console.error("Error fetching financial record:",e),e}}async createFinancialRecord(t){var e,a;try{const o=await n.post("/financial-records",t);return await s.fire({icon:"success",title:"Success!",text:"Financial record created successfully.",confirmButtonColor:"#10B981",timer:3e3}),o.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to create financial record.";throw await s.fire({icon:"error",title:"Error Creating Financial Record",text:r,confirmButtonColor:"#EF4444"}),o}}async updateFinancialRecord(t,e){var a,o;try{const r=await n.patch(`/financial-records/${t}`,e);return await s.fire({icon:"success",title:"Success!",text:"Financial record updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),r.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to update financial record.";throw await s.fire({icon:"error",title:"Error Updating Financial Record",text:c,confirmButtonColor:"#EF4444"}),r}}async markFinancialRecordAsPaid(t,e){var a,o;try{const r=await n.post(`/financial-records/${t}/mark-paid`,e);return await s.fire({icon:"success",title:"Payment Recorded!",text:"Payment has been recorded successfully.",confirmButtonColor:"#10B981",timer:2e3}),r.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to record payment.";throw await s.fire({icon:"error",title:"Error Recording Payment",text:c,confirmButtonColor:"#EF4444"}),r}}async getSchedules(t={}){try{return(await n.get("/schedules",{params:t})).data}catch(e){throw console.error("Error fetching schedules:",e),e}}async getSchedule(t){try{return(await n.get(`/schedules/${t}`)).data}catch(e){throw console.error("Error fetching schedule:",e),e}}async createSchedule(t){var e,a;try{const o=await n.post("/schedules",t);return await s.fire({icon:"success",title:"Success!",text:"Schedule created successfully.",confirmButtonColor:"#10B981",timer:3e3}),o.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to create schedule.";throw await s.fire({icon:"error",title:"Error Creating Schedule",text:r,confirmButtonColor:"#EF4444"}),o}}async updateSchedule(t,e){var a,o;try{const r=await n.patch(`/schedules/${t}`,e);return await s.fire({icon:"success",title:"Success!",text:"Schedule updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),r.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to update schedule.";throw await s.fire({icon:"error",title:"Error Updating Schedule",text:c,confirmButtonColor:"#EF4444"}),r}}async deleteSchedule(t,e=""){var a,o;try{if(!(await s.fire({icon:"warning",title:"Delete Schedule",text:`Are you sure you want to delete ${e}? This action cannot be undone.`,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it!",cancelButtonText:"Cancel"})).isConfirmed)return null;const c=await n.delete(`/schedules/${t}`);return await s.fire({icon:"success",title:"Deleted!",text:"Schedule has been deleted successfully.",confirmButtonColor:"#10B981",timer:3e3}),c.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to delete schedule.";throw await s.fire({icon:"error",title:"Error Deleting Schedule",text:c,confirmButtonColor:"#EF4444"}),r}}async makeScheduleAvailable(t){var e,a;try{const o=await n.post(`/schedules/${t}/make-available`);return await s.fire({icon:"success",title:"Schedule Available!",text:"Schedule has been marked as available.",confirmButtonColor:"#10B981",timer:2e3}),o.data}catch(o){const r=((a=(e=o.response)==null?void 0:e.data)==null?void 0:a.message)||"Failed to make schedule available.";throw await s.fire({icon:"error",title:"Error",text:r,confirmButtonColor:"#EF4444"}),o}}async makeScheduleUnavailable(t,e=""){var a,o;try{const r=await s.fire({icon:"warning",title:"Make Schedule Unavailable",text:"Are you sure you want to make this schedule unavailable?",input:"textarea",inputPlaceholder:"Reason (optional)",inputValue:e,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, make unavailable",cancelButtonText:"Cancel"});if(!r.isConfirmed)return null;const c=await n.post(`/schedules/${t}/make-unavailable`,{reason:r.value||"No reason provided"});return await s.fire({icon:"success",title:"Schedule Unavailable!",text:"Schedule has been marked as unavailable.",confirmButtonColor:"#10B981",timer:2e3}),c.data}catch(r){const c=((o=(a=r.response)==null?void 0:a.data)==null?void 0:o.message)||"Failed to make schedule unavailable.";throw await s.fire({icon:"error",title:"Error",text:c,confirmButtonColor:"#EF4444"}),r}}async getNotifications(t={}){try{return(await n.get("/notifications",{params:t})).data}catch(e){throw console.error("Error fetching notifications:",e),e}}async markNotificationAsRead(t){try{return(await n.post(`/notifications/${t}/mark-read`)).data}catch(e){throw console.error("Error marking notification as read:",e),e}}async markNotificationAsUnread(t){try{return(await n.post(`/notifications/${t}/mark-unread`)).data}catch(e){throw console.error("Error marking notification as unread:",e),e}}async deleteNotification(t){try{if(!(await s.fire({icon:"warning",title:"Delete Notification",text:"Are you sure you want to delete this notification?",showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it",cancelButtonText:"Cancel"})).isConfirmed)return null;const a=await n.delete(`/notifications/${t}`);return await s.fire({icon:"success",title:"Deleted",text:"Notification has been deleted.",confirmButtonColor:"#10B981",timer:2e3}),a.data}catch(e){throw console.error("Error deleting notification:",e),e}}async getUnreadNotificationCount(){try{return(await n.get("/api/notifications/unread-count")).data}catch(t){throw console.error("Error fetching unread notification count:",t),t}}async getRecentNotifications(){try{return(await n.get("/api/notifications/recent")).data}catch(t){throw console.error("Error fetching recent notifications:",t),t}}async markAllNotificationsAsRead(){try{const t=await n.post("/notifications/mark-all-read");return await s.fire({icon:"success",title:"All Notifications Marked as Read",text:"All your notifications have been marked as read.",confirmButtonColor:"#10B981",timer:2e3}),t.data}catch(t){throw console.error("Error marking all notifications as read:",t),t}}async getReports(){try{return(await n.get("/reports")).data}catch(t){throw console.error("Error fetching reports:",t),t}}async getFinancialReports(){try{return(await n.get("/reports/financial")).data}catch(t){throw console.error("Error fetching financial reports:",t),t}}async getAppointmentReports(){try{return(await n.get("/reports/appointments")).data}catch(t){throw console.error("Error fetching appointment reports:",t),t}}async getPatientReports(){try{return(await n.get("/reports/patients")).data}catch(t){throw console.error("Error fetching patient reports:",t),t}}async searchPatients(t){try{const e={q:t,role:"patient"};return(await n.get("/api/users/search",{params:e})).data}catch(e){throw console.error("Error searching patients:",e),e}}async searchStaff(t){try{const e={q:t,role:"staff"};return(await n.get("/api/users/search",{params:e})).data}catch(e){throw console.error("Error searching staff:",e),e}}async getSystemStatus(){try{return(await n.get("/api/system/status")).data}catch(t){throw console.error("Error fetching system status:",t),t}}}const g=new f;export{g as a};
