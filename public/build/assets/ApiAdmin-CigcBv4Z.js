import{a as c}from"./app-JcAsAuql.js";import{S as a}from"./sweetalert2.esm.all-acGi8jXx.js";c.defaults.withCredentials=!0;c.defaults.headers.common["X-Requested-With"]="XMLHttpRequest";c.defaults.headers.common.Accept="application/json";c.defaults.headers.common["Content-Type"]="application/json";const d=()=>{var p,t,e;return((p=document.querySelector('meta[name="csrf-token"]'))==null?void 0:p.getAttribute("content"))||((t=window.Laravel)==null?void 0:t.csrfToken)||((e=document.querySelector('input[name="_token"]'))==null?void 0:e.value)};c.defaults.headers.common["X-CSRF-TOKEN"]=d();c.interceptors.request.use(p=>{const t=d();return t&&(p.headers["X-CSRF-TOKEN"]=t),p.headers.Accept||(p.headers.Accept="application/json"),p});c.interceptors.response.use(p=>p,p=>{var t,e,r,o;return((t=p.response)==null?void 0:t.status)===419?a.fire({icon:"error",title:"Session Expired",text:"Please refresh the page and try again.",confirmButtonColor:"#3B82F6"}).then(()=>{window.location.reload()}):((e=p.response)==null?void 0:e.status)===403?a.fire({icon:"error",title:"Access Denied",text:"You do not have permission to perform this action.",confirmButtonColor:"#3B82F6"}):((r=p.response)==null?void 0:r.status)===500?a.fire({icon:"error",title:"Server Error",text:"An unexpected error occurred. Please try again later.",confirmButtonColor:"#3B82F6"}):((o=p.response)==null?void 0:o.status)===422&&console.warn("Validation error:",p.response.data),Promise.reject(p)});class f{constructor(){this.baseURL=window.location.origin}_handleResponse(t){return t.data}_handleError(t,e="operation"){var s,n,i,l,h;const r=((n=(s=t.response)==null?void 0:s.data)==null?void 0:n.message)||`Failed to complete ${e}.`,o=((l=(i=t.response)==null?void 0:i.data)==null?void 0:l.errors)||{};return console.error(`API Error (${e}):`,t),{success:!1,message:r,errors:o,status:(h=t.response)==null?void 0:h.status}}async getAppointments(t={}){var e,r,o,s,n;try{const i=Object.keys(t).reduce((h,u)=>(t[u]!==null&&t[u]!==void 0&&t[u]!==""&&(h[u]=t[u]),h),{});console.log("Sending params:",i);const l=await c.get("/appointments",{params:i,headers:{Accept:"application/json"},timeout:1e4});if(console.log("API Response Status:",l.status),console.log("API Response Headers:",l.headers),console.log("API Response Data:",l.data),l.status>=200&&l.status<300)return this._handleResponse(l);throw new Error(`HTTP ${l.status}: ${l.statusText}`)}catch(i){throw console.error("Error fetching appointments:",i),console.error("Error type:",i.constructor.name),console.error("Error code:",i.code),console.error("Error response:",(e=i.response)==null?void 0:e.data),console.error("Error status:",(r=i.response)==null?void 0:r.status),i.code==="ECONNABORTED"?(console.error("Request timeout - server took too long to respond"),new Error("Request timeout - please try again")):i.code==="ERR_NETWORK"?(console.error("Network error - check your connection"),new Error("Network error - check your connection")):((o=i.response)==null?void 0:o.status)===500?(console.error("Server error - check Laravel logs"),new Error("Server error - please try again later")):((s=i.response)==null?void 0:s.status)===422?(console.error("Validation error"),i):((n=i.response)==null?void 0:n.status)===419?(console.error("CSRF token expired"),new Error("Session expired - please refresh the page")):this._handleError(i,"fetch appointments")}}async getAppointment(t){try{const e=await c.get(`/appointments/${t}`,{headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching appointment:",e),this._handleError(e,"fetch appointment")}}async createAppointment(t){var e;try{const r=await c.post("/appointments",t,{headers:{Accept:"application/json"}});return await a.fire({icon:"success",title:"Success!",text:"Appointment created successfully.",confirmButtonColor:"#10B981",timer:3e3}),this._handleResponse(r)}catch(r){if(((e=r.response)==null?void 0:e.status)===422)throw r;const o=this._handleError(r,"create appointment");let s=o.message;throw Object.keys(o.errors).length>0&&(s+=`

Validation errors:
`,Object.keys(o.errors).forEach(n=>{s+=`• ${n}: ${o.errors[n][0]}
`})),await a.fire({icon:"error",title:"Error Creating Appointment",text:s,confirmButtonColor:"#EF4444"}),r}}async updateAppointment(t,e){var r;try{const o=await c.put(`/appointments/${t}`,e,{headers:{Accept:"application/json"}}),s=this._handleResponse(o),n=s.message||"Appointment updated successfully.";return await a.fire({icon:"success",title:"Success!",text:n,confirmButtonColor:"#10B981",timer:3e3}),s}catch(o){if(((r=o.response)==null?void 0:r.status)===422)throw o;const s=this._handleError(o,"update appointment");let n=s.message;throw Object.keys(s.errors).length>0&&(n+=`

Validation errors:
`,Object.keys(s.errors).forEach(i=>{n+=`• ${i}: ${s.errors[i][0]}
`})),await a.fire({icon:"error",title:"Error Updating Appointment",text:n,confirmButtonColor:"#EF4444"}),o}}async deleteAppointment(t,e=""){try{if(!(await a.fire({icon:"warning",title:"Delete Appointment",text:`Are you sure you want to delete ${e}? This action cannot be undone.`,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it!",cancelButtonText:"Cancel"})).isConfirmed)return null;const o=await c.delete(`/appointments/${t}`,{headers:{Accept:"application/json"}}),s=this._handleResponse(o),n=s.message||"Appointment has been deleted successfully.";return await a.fire({icon:"success",title:"Deleted!",text:n,confirmButtonColor:"#10B981",timer:3e3}),s}catch(r){const o=this._handleError(r,"delete appointment");throw await a.fire({icon:"error",title:"Error Deleting Appointment",text:o.message,confirmButtonColor:"#EF4444"}),r}}async checkInAppointment(t){try{const e=await c.post(`/appointments/${t}/check-in`,{},{headers:{Accept:"application/json"}}),r=this._handleResponse(e);return await a.fire({icon:"success",title:"Success!",text:"Patient checked in successfully.",confirmButtonColor:"#10B981",timer:2e3}),r}catch(e){const r=this._handleError(e,"check in appointment");throw await a.fire({icon:"error",title:"Check-in Failed",text:r.message,confirmButtonColor:"#EF4444"}),e}}async completeAppointment(t,e=""){try{const r=await c.post(`/appointments/${t}/complete`,{completion_notes:e},{headers:{Accept:"application/json"}}),o=this._handleResponse(r);return await a.fire({icon:"success",title:"Success!",text:"Appointment completed successfully.",confirmButtonColor:"#10B981",timer:2e3}),o}catch(r){const o=this._handleError(r,"complete appointment");throw await a.fire({icon:"error",title:"Error Completing Appointment",text:o.message,confirmButtonColor:"#EF4444"}),r}}async cancelAppointment(t,e=""){try{const r=await c.post(`/appointments/${t}/cancel`,{cancellation_reason:e},{headers:{Accept:"application/json"}}),o=this._handleResponse(r);return await a.fire({icon:"success",title:"Cancelled!",text:"Appointment has been cancelled.",confirmButtonColor:"#10B981",timer:2e3}),o}catch(r){const o=this._handleError(r,"cancel appointment");throw await a.fire({icon:"error",title:"Error Cancelling Appointment",text:o.message,confirmButtonColor:"#EF4444"}),r}}async getAvailableSlots(t,e,r){try{const o=await c.get("/appointments/available-slots",{params:{doctor_id:t,date:e,duration:r},headers:{Accept:"application/json"}});return this._handleResponse(o)}catch(o){throw console.error("Error fetching available slots:",o),this._handleError(o,"fetch available slots")}}async getPatients(t={}){try{const e=await c.get("/patients",{params:t,headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching patients:",e),this._handleError(e,"fetch patients")}}async getPatient(t){try{const e=await c.get(`/patients/${t}`,{headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching patient:",e),this._handleError(e,"fetch patient")}}async createPatient(t){var e,r,o,s;try{const n=await c.post("/patients",t,{headers:{Accept:"application/json"}});return await a.fire({icon:"success",title:"Success!",text:"Patient created successfully.",confirmButtonColor:"#10B981",timer:3e3}),this._handleResponse(n)}catch(n){if(console.error("Error creating patient:",n),((e=n.response)==null?void 0:e.status)===422)throw n;let l=this._handleError(n,"create patient").message;throw((r=n.response)==null?void 0:r.status)===409?l="A patient with this email already exists.":((o=n.response)==null?void 0:o.status)===403?l="You do not have permission to create patients.":((s=n.response)==null?void 0:s.status)===500&&(l="Server error occurred. Please try again later."),await a.fire({icon:"error",title:"Error Creating Patient",text:l,confirmButtonColor:"#EF4444"}),n}}async updatePatient(t,e){var r,o;try{console.log("Updating patient with data:",e);const s=await c.patch(`/patients/${t}`,e,{headers:{Accept:"application/json"}}),n=this._handleResponse(s),i=n.message||"Patient updated successfully.";return await a.fire({icon:"success",title:"Success!",text:i,confirmButtonColor:"#10B981",timer:3e3}),n}catch(s){if(console.error("Patient update error:",s),((r=s.response)==null?void 0:r.status)===405)try{const l=await c.put(`/patients/${t}`,e,{headers:{Accept:"application/json"}}),h=this._handleResponse(l),u=h.message||"Patient updated successfully.";return await a.fire({icon:"success",title:"Success!",text:u,confirmButtonColor:"#10B981",timer:3e3}),h}catch(l){throw console.error("PUT method also failed:",l),l}if(((o=s.response)==null?void 0:o.status)===422)throw console.error("Validation errors:",s.response.data.errors),s;const n=this._handleError(s,"update patient");let i=n.message;throw Object.keys(n.errors).length>0&&(i+=`

Validation errors:
`,Object.keys(n.errors).forEach(l=>{i+=`• ${l}: ${n.errors[l][0]}
`})),await a.fire({icon:"error",title:"Error Updating Patient",text:i,confirmButtonColor:"#EF4444"}),s}}async deletePatient(t,e=""){try{if(!(await a.fire({icon:"warning",title:"Delete Patient",text:`Are you sure you want to delete ${e}? This action cannot be undone.`,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it!",cancelButtonText:"Cancel"})).isConfirmed)return null;const o=await c.delete(`/patients/${t}`,{headers:{Accept:"application/json"}}),s=this._handleResponse(o),n=s.message||"Patient has been deleted successfully.";return await a.fire({icon:"success",title:"Deleted!",text:n,confirmButtonColor:"#10B981",timer:3e3}),s}catch(r){const o=this._handleError(r,"delete patient");throw await a.fire({icon:"error",title:"Error Deleting Patient",text:o.message,confirmButtonColor:"#EF4444"}),r}}async getServices(t={}){try{const e=await c.get("/services",{params:t,headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching services:",e),this._handleError(e,"fetch services")}}async getService(t){try{const e=await c.get(`/services/${t}`,{headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching service:",e),this._handleError(e,"fetch service")}}async createService(t){try{const e={...t,is_active:t.is_active!==void 0?!!t.is_active:!0,price:parseFloat(t.price),duration_minutes:parseInt(t.duration_minutes)},r=await c.post("/services",e,{headers:{Accept:"application/json"}});return await a.fire({icon:"success",title:"Success!",text:"Service created successfully.",confirmButtonColor:"#10B981",timer:3e3}),this._handleResponse(r)}catch(e){const r=this._handleError(e,"create service");let o=r.message;throw Object.keys(r.errors).length>0&&(o+=`

Validation errors:
`,Object.keys(r.errors).forEach(s=>{o+=`• ${s}: ${r.errors[s][0]}
`})),await a.fire({icon:"error",title:"Error Creating Service",text:o,confirmButtonColor:"#EF4444"}),e}}async updateService(t,e){try{const r={...e,is_active:e.is_active!==void 0?!!e.is_active:!0,price:parseFloat(e.price),duration_minutes:parseInt(e.duration_minutes)},o=await c.put(`/services/${t}`,r,{headers:{Accept:"application/json"}});return await a.fire({icon:"success",title:"Success!",text:"Service updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),this._handleResponse(o)}catch(r){const o=this._handleError(r,"update service");let s=o.message;throw Object.keys(o.errors).length>0&&(s+=`

Validation errors:
`,Object.keys(o.errors).forEach(n=>{s+=`• ${n}: ${o.errors[n][0]}
`})),await a.fire({icon:"error",title:"Error Updating Service",text:s,confirmButtonColor:"#EF4444"}),r}}async deleteService(t,e=""){try{if(!(await a.fire({icon:"warning",title:"Delete Service",text:`Are you sure you want to delete ${e}? This action cannot be undone.`,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it!",cancelButtonText:"Cancel"})).isConfirmed)return null;const o=await c.delete(`/services/${t}`,{headers:{Accept:"application/json"}});return await a.fire({icon:"success",title:"Deleted!",text:"Service has been deleted successfully.",confirmButtonColor:"#10B981",timer:3e3}),this._handleResponse(o)}catch(r){const o=this._handleError(r,"delete service");throw await a.fire({icon:"error",title:"Error Deleting Service",text:o.message,confirmButtonColor:"#EF4444"}),r}}async getUsers(t={}){try{const e=await c.get("/users",{params:t,headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching users:",e),this._handleError(e,"fetch users")}}async getUser(t){try{const e=await c.get(`/users/${t}`,{headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching user:",e),this._handleError(e,"fetch user")}}async createUser(t){try{const e=await c.post("/users",t,{headers:{Accept:"application/json"}});return await a.fire({icon:"success",title:"Success!",text:"User created successfully.",confirmButtonColor:"#10B981",timer:3e3}),this._handleResponse(e)}catch(e){const r=this._handleError(e,"create user");let o=r.message;throw Object.keys(r.errors).length>0&&(o+=`

Validation errors:
`,Object.keys(r.errors).forEach(s=>{o+=`• ${s}: ${r.errors[s][0]}
`})),await a.fire({icon:"error",title:"Error Creating User",text:o,confirmButtonColor:"#EF4444"}),e}}async updateUser(t,e){try{const r=await c.put(`/users/${t}`,e,{headers:{Accept:"application/json"}}),o=this._handleResponse(r),s=o.message||"User updated successfully.";return await a.fire({icon:"success",title:"Success!",text:s,confirmButtonColor:"#10B981",timer:3e3}),o}catch(r){const o=this._handleError(r,"update user");let s=o.message;throw Object.keys(o.errors).length>0&&(s+=`

Validation errors:
`,Object.keys(o.errors).forEach(n=>{s+=`• ${n}: ${o.errors[n][0]}
`})),await a.fire({icon:"error",title:"Error Updating User",text:s,confirmButtonColor:"#EF4444"}),r}}async deleteUser(t,e=""){try{if(!(await a.fire({icon:"warning",title:"Delete User",text:`Are you sure you want to delete ${e}? This action cannot be undone.`,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it!",cancelButtonText:"Cancel"})).isConfirmed)return null;const o=await c.delete(`/users/${t}`,{headers:{Accept:"application/json"}}),s=this._handleResponse(o),n=s.message||"User has been deleted successfully.";return await a.fire({icon:"success",title:"Deleted!",text:n,confirmButtonColor:"#10B981",timer:3e3}),s}catch(r){const o=this._handleError(r,"delete user");throw await a.fire({icon:"error",title:"Error Deleting User",text:o.message,confirmButtonColor:"#EF4444"}),r}}async getFinancialRecords(t={}){try{const e=await c.get("/financial-records",{params:t,headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching financial records:",e),this._handleError(e,"fetch financial records")}}async getFinancialRecord(t){try{const e=await c.get(`/financial-records/${t}`,{headers:{Accept:"application/json"}});return this._handleResponse(e)}catch(e){throw console.error("Error fetching financial record:",e),this._handleError(e,"fetch financial record")}}async createFinancialRecord(t){var e;try{const r=await c.post("/financial-records",t,{headers:{Accept:"application/json"}});return await a.fire({icon:"success",title:"Success!",text:"Financial record created successfully.",confirmButtonColor:"#10B981",timer:3e3}),this._handleResponse(r)}catch(r){if(((e=r.response)==null?void 0:e.status)===422)throw r;const o=this._handleError(r,"create financial record");let s=o.message;throw Object.keys(o.errors).length>0&&(s+=`

Validation errors:
`,Object.keys(o.errors).forEach(n=>{s+=`• ${n}: ${o.errors[n][0]}
`})),await a.fire({icon:"error",title:"Error Creating Financial Record",text:s,confirmButtonColor:"#EF4444"}),r}}async updateFinancialRecord(t,e){var r;try{const o=await c.patch(`/api/v1/financial-records/${t}`,e,{headers:{Accept:"application/json"}}),s=this._handleResponse(o),n=s.message||"Financial record updated successfully.";return await a.fire({icon:"success",title:"Success!",text:n,confirmButtonColor:"#10B981",timer:3e3}),s}catch(o){if(((r=o.response)==null?void 0:r.status)===422)throw o;const s=this._handleError(o,"update financial record");let n=s.message;throw Object.keys(s.errors).length>0&&(n+=`

Validation errors:
`,Object.keys(s.errors).forEach(i=>{n+=`• ${i}: ${s.errors[i][0]}
`})),await a.fire({icon:"error",title:"Error Updating Financial Record",text:n,confirmButtonColor:"#EF4444"}),o}}async deleteFinancialRecord(t,e=""){try{if(!(await a.fire({icon:"warning",title:"Delete Financial Record",text:`Are you sure you want to delete ${e}? This action cannot be undone.`,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it!",cancelButtonText:"Cancel"})).isConfirmed)return null;const o=await c.delete(`/api/v1/financial-records/${t}`,{headers:{Accept:"application/json"}}),s=this._handleResponse(o),n=s.message||"Financial record has been deleted successfully.";return await a.fire({icon:"success",title:"Deleted!",text:n,confirmButtonColor:"#10B981",timer:3e3}),s}catch(r){const o=this._handleError(r,"delete financial record");throw await a.fire({icon:"error",title:"Error Deleting Financial Record",text:o.message,confirmButtonColor:"#EF4444"}),r}}async markFinancialRecordAsPaid(t,e={}){try{const r=await c.post(`/api/v1/financial-records/${t}/mark-as-paid`,e,{headers:{Accept:"application/json"}}),o=this._handleResponse(r);return await a.fire({icon:"success",title:"Success!",text:"Payment recorded successfully.",confirmButtonColor:"#10B981",timer:2e3}),o}catch(r){const o=this._handleError(r,"mark as paid");throw await a.fire({icon:"error",title:"Error Recording Payment",text:o.message,confirmButtonColor:"#EF4444"}),r}}async getDashboardData(){try{const t=await c.get("/api/dashboard/data",{headers:{Accept:"application/json"}});return this._handleResponse(t)}catch(t){throw console.error("Error fetching dashboard data:",t),this._handleError(t,"fetch dashboard data")}}async getDashboardStats(){try{const t=await c.get("/api/dashboard/stats",{headers:{Accept:"application/json"}});return this._handleResponse(t)}catch(t){throw console.error("Error fetching dashboard stats:",t),this._handleError(t,"fetch dashboard stats")}}async getRecentActivity(){try{const t=await c.get("/api/dashboard/recent-activity",{headers:{Accept:"application/json"}});return this._handleResponse(t)}catch(t){throw console.error("Error fetching recent activity:",t),this._handleError(t,"fetch recent activity")}}async getSystemAlerts(){try{const t=await c.get("/api/dashboard/alerts",{headers:{Accept:"application/json"}});return this._handleResponse(t)}catch(t){throw console.error("Error fetching system alerts:",t),this._handleError(t,"fetch system alerts")}}async searchServices(t,e=null){try{const r={search:t};e&&(r.category=e);const o=await c.get("/api/v1/services",{params:r,headers:{Accept:"application/json"}});return this._handleResponse(o)}catch(r){throw console.error("Error searching services:",r),this._handleError(r,"search services")}}async getServiceCategories(){try{const t=await c.get("/api/v1/services",{params:{categories_only:!0},headers:{Accept:"application/json"}});return this._handleResponse(t)}catch(t){throw console.error("Error fetching service categories:",t),this._handleError(t,"fetch service categories")}}showErrorToast(t){a.fire({toast:!0,position:"top-end",icon:"error",title:t,showConfirmButton:!1,timer:3e3,timerProgressBar:!0})}showSuccessToast(t){a.fire({toast:!0,position:"top-end",icon:"success",title:t,showConfirmButton:!1,timer:3e3,timerProgressBar:!0})}async confirmAction(t,e,r="Yes",o="warning"){return(await a.fire({icon:o,title:t,text:e,showCancelButton:!0,confirmButtonColor:o==="warning"?"#EF4444":"#10B981",cancelButtonColor:"#6B7280",confirmButtonText:r,cancelButtonText:"Cancel"})).isConfirmed}}const g=new f;export{g as a};
