import{a}from"./app-JcAsAuql.js";import{S as s}from"./sweetalert2.esm.all-acGi8jXx.js";a.defaults.withCredentials=!0;a.defaults.headers.common["X-Requested-With"]="XMLHttpRequest";const f=()=>{var c,e,t;return((c=document.querySelector('meta[name="csrf-token"]'))==null?void 0:c.getAttribute("content"))||((e=window.Laravel)==null?void 0:e.csrfToken)||((t=document.querySelector('input[name="_token"]'))==null?void 0:t.value)};a.defaults.headers.common["X-CSRF-TOKEN"]=f();a.interceptors.request.use(c=>{const e=f();return e&&(c.headers["X-CSRF-TOKEN"]=e),c});a.interceptors.response.use(c=>c,c=>{var e,t;return((e=c.response)==null?void 0:e.status)===419?s.fire({icon:"error",title:"Session Expired",text:"Please refresh the page and try again.",confirmButtonColor:"#3B82F6"}).then(()=>{window.location.reload()}):((t=c.response)==null?void 0:t.status)===403&&s.fire({icon:"error",title:"Access Denied",text:"You do not have permission to perform this action.",confirmButtonColor:"#3B82F6"}),Promise.reject(c)});class m{constructor(){}async getDashboardStats(){try{return(await a.get("/api/dashboard/stats")).data}catch(e){throw console.error("Error fetching patient dashboard stats:",e),e}}async getDashboardData(){try{return(await a.get("/api/dashboard/data")).data}catch(e){throw console.error("Error fetching dashboard data:",e),e}}async getProfile(){try{return(await a.get("/profile")).data}catch(e){throw console.error("Error fetching profile:",e),e}}async updateProfile(e){var t,n,o,r;try{const i=await a.patch("/profile",e);return await s.fire({icon:"success",title:"Success!",text:"Profile updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),i.data}catch(i){const p=((n=(t=i.response)==null?void 0:t.data)==null?void 0:n.message)||"Failed to update profile.",l=((r=(o=i.response)==null?void 0:o.data)==null?void 0:r.errors)||{};let u=p;throw Object.keys(l).length>0&&(u+=`

Validation errors:
`,Object.keys(l).forEach(d=>{u+=`• ${l[d][0]}
`})),await s.fire({icon:"error",title:"Error Updating Profile",text:u,confirmButtonColor:"#EF4444"}),i}}async changePassword(e){var t,n,o,r;try{const i=await a.patch("/profile/password",e);return await s.fire({icon:"success",title:"Success!",text:"Password changed successfully.",confirmButtonColor:"#10B981",timer:3e3}),i.data}catch(i){const p=((n=(t=i.response)==null?void 0:t.data)==null?void 0:n.message)||"Failed to change password.",l=((r=(o=i.response)==null?void 0:o.data)==null?void 0:r.errors)||{};let u=p;throw Object.keys(l).length>0&&(u+=`

Validation errors:
`,Object.keys(l).forEach(d=>{u+=`• ${l[d][0]}
`})),await s.fire({icon:"error",title:"Error Changing Password",text:u,confirmButtonColor:"#EF4444"}),i}}async updatePreferences(e){var t,n;try{const o=await a.patch("/profile/preferences",e);return await s.fire({icon:"success",title:"Success!",text:"Preferences updated successfully.",confirmButtonColor:"#10B981",timer:2e3}),o.data}catch(o){const r=((n=(t=o.response)==null?void 0:t.data)==null?void 0:n.message)||"Failed to update preferences.";throw await s.fire({icon:"error",title:"Error Updating Preferences",text:r,confirmButtonColor:"#EF4444"}),o}}async getMyAppointments(e={}){try{return(await a.get("/appointments",{params:e})).data}catch(t){throw console.error("Error fetching my appointments:",t),t}}async getAppointment(e){try{return(await a.get(`/appointments/${e}`)).data}catch(t){throw console.error("Error fetching appointment:",t),t}}async bookAppointment(e){var t,n,o,r;try{const i=await a.post("/appointments",e);return await s.fire({icon:"success",title:"Appointment Booked!",text:"Your appointment has been booked successfully. You will receive a confirmation shortly.",confirmButtonColor:"#10B981",timer:4e3}),i.data}catch(i){const p=((n=(t=i.response)==null?void 0:t.data)==null?void 0:n.message)||"Failed to book appointment.",l=((r=(o=i.response)==null?void 0:o.data)==null?void 0:r.errors)||{};let u=p;throw Object.keys(l).length>0&&(u+=`

Validation errors:
`,Object.keys(l).forEach(d=>{u+=`• ${l[d][0]}
`})),await s.fire({icon:"error",title:"Booking Failed",text:u,confirmButtonColor:"#EF4444"}),i}}async updateAppointment(e,t){var n,o;try{const r=await a.patch(`/appointments/${e}`,t);return await s.fire({icon:"success",title:"Success!",text:"Appointment updated successfully.",confirmButtonColor:"#10B981",timer:3e3}),r.data}catch(r){const i=((o=(n=r.response)==null?void 0:n.data)==null?void 0:o.message)||"Failed to update appointment.";throw await s.fire({icon:"error",title:"Update Failed",text:i,confirmButtonColor:"#EF4444"}),r}}async requestReschedule(e,t,n=""){var o,r;try{const i=await s.fire({icon:"question",title:"Request Reschedule",text:"Are you sure you want to request to reschedule this appointment?",input:"textarea",inputPlaceholder:"Reason for rescheduling (optional)",inputValue:n,showCancelButton:!0,confirmButtonColor:"#3B82F6",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, request reschedule",cancelButtonText:"Cancel"});if(!i.isConfirmed)return null;const p=await a.patch(`/appointments/${e}`,{notes:`Reschedule requested: ${i.value||"No reason provided"}`,requested_datetime:t});return await s.fire({icon:"info",title:"Request Submitted",text:"Your reschedule request has been submitted. We will contact you shortly to confirm.",confirmButtonColor:"#3B82F6",timer:4e3}),p.data}catch(i){const p=((r=(o=i.response)==null?void 0:o.data)==null?void 0:r.message)||"Failed to request reschedule.";throw await s.fire({icon:"error",title:"Request Failed",text:p,confirmButtonColor:"#EF4444"}),i}}async cancelAppointment(e,t=""){var n,o;try{const r=await s.fire({icon:"warning",title:"Cancel Appointment",text:"Are you sure you want to cancel this appointment? Please note our cancellation policy.",input:"textarea",inputPlaceholder:"Reason for cancellation (optional)",inputValue:t,showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, cancel appointment",cancelButtonText:"Keep appointment"});if(!r.isConfirmed)return null;const i=await a.post(`/appointments/${e}/cancel`,{cancellation_reason:r.value||"No reason provided"});return await s.fire({icon:"success",title:"Cancelled",text:"Your appointment has been cancelled. You will receive a confirmation shortly.",confirmButtonColor:"#10B981",timer:3e3}),i.data}catch(r){const i=((o=(n=r.response)==null?void 0:n.data)==null?void 0:o.message)||"Failed to cancel appointment.";throw await s.fire({icon:"error",title:"Cancellation Failed",text:i,confirmButtonColor:"#EF4444"}),r}}async getAvailableSlots(e){try{return(await a.get("/appointments/available-slots",{params:e})).data}catch(t){throw console.error("Error fetching available slots:",t),t}}async getMyRecords(e={}){try{return(await a.get("/patient-records",{params:e})).data}catch(t){throw console.error("Error fetching medical records:",t),t}}async getRecord(e){try{return(await a.get(`/patient-records/${e}`)).data}catch(t){throw console.error("Error fetching medical record:",t),t}}async getMyTreatmentPlans(e={}){try{return(await a.get("/treatment-plans",{params:e})).data}catch(t){throw console.error("Error fetching treatment plans:",t),t}}async getTreatmentPlan(e){try{return(await a.get(`/treatment-plans/${e}`)).data}catch(t){throw console.error("Error fetching treatment plan:",t),t}}async acceptTreatmentPlan(e){var t,n;try{if(!(await s.fire({icon:"question",title:"Accept Treatment Plan",text:"Are you sure you want to accept this treatment plan?",showCancelButton:!0,confirmButtonColor:"#10B981",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, accept plan",cancelButtonText:"Review more"})).isConfirmed)return null;const r=await a.patch(`/treatment-plans/${e}`,{patient_acceptance:"accepted",acceptance_date:new Date().toISOString()});return await s.fire({icon:"success",title:"Plan Accepted",text:"You have accepted the treatment plan. Your doctor will be notified.",confirmButtonColor:"#10B981",timer:3e3}),r.data}catch(o){const r=((n=(t=o.response)==null?void 0:t.data)==null?void 0:n.message)||"Failed to accept treatment plan.";throw await s.fire({icon:"error",title:"Error",text:r,confirmButtonColor:"#EF4444"}),o}}async getMyBilling(e={}){try{return(await a.get("/financial-records",{params:e})).data}catch(t){throw console.error("Error fetching billing information:",t),t}}async getInvoice(e){try{return(await a.get(`/financial-records/${e}`)).data}catch(t){throw console.error("Error fetching invoice:",t),t}}async makePayment(e,t){var n,o;try{s.fire({icon:"info",title:"Processing Payment...",text:"Please wait while we process your payment.",allowOutsideClick:!1,showConfirmButton:!1,didOpen:()=>{s.showLoading()}});const r=await a.post(`/financial-records/${e}/mark-paid`,t);return await s.fire({icon:"success",title:"Payment Successful!",text:"Your payment has been processed successfully. You will receive a receipt shortly.",confirmButtonColor:"#10B981",timer:4e3}),r.data}catch(r){const i=((o=(n=r.response)==null?void 0:n.data)==null?void 0:o.message)||"Payment processing failed.";throw await s.fire({icon:"error",title:"Payment Failed",text:i,confirmButtonColor:"#EF4444"}),r}}async requestPaymentPlan(e,t){var n,o;try{if(!(await s.fire({icon:"question",title:"Request Payment Plan",text:"Are you sure you want to request a payment plan for this invoice?",showCancelButton:!0,confirmButtonColor:"#3B82F6",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, request plan",cancelButtonText:"Cancel"})).isConfirmed)return null;const i=await a.patch(`/financial-records/${e}`,{notes:`Payment plan requested: ${JSON.stringify(t)}`,payment_plan_requested:!0});return await s.fire({icon:"info",title:"Request Submitted",text:"Your payment plan request has been submitted. We will contact you shortly to discuss the details.",confirmButtonColor:"#3B82F6",timer:4e3}),i.data}catch(r){const i=((o=(n=r.response)==null?void 0:n.data)==null?void 0:o.message)||"Failed to request payment plan.";throw await s.fire({icon:"error",title:"Request Failed",text:i,confirmButtonColor:"#EF4444"}),r}}async getServices(){try{return(await a.get("/services")).data}catch(e){throw console.error("Error fetching services:",e),e}}async getService(e){try{return(await a.get(`/services/${e}`)).data}catch(t){throw console.error("Error fetching service:",t),t}}async getNotifications(e={}){try{return(await a.get("/notifications",{params:e})).data}catch(t){throw console.error("Error fetching notifications:",t),t}}async markNotificationAsRead(e){try{return(await a.post(`/notifications/${e}/mark-read`)).data}catch(t){throw console.error("Error marking notification as read:",t),t}}async markNotificationAsUnread(e){try{return(await a.post(`/notifications/${e}/mark-unread`)).data}catch(t){throw console.error("Error marking notification as unread:",t),t}}async markAllNotificationsAsRead(){try{const e=await a.post("/notifications/mark-all-read");return await s.fire({icon:"success",title:"All Notifications Marked as Read",text:"All your notifications have been marked as read.",confirmButtonColor:"#10B981",timer:2e3}),e.data}catch(e){throw console.error("Error marking all notifications as read:",e),e}}async deleteNotification(e){try{if(!(await s.fire({icon:"warning",title:"Delete Notification",text:"Are you sure you want to delete this notification?",showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, delete it",cancelButtonText:"Cancel"})).isConfirmed)return null;const n=await a.delete(`/notifications/${e}`);return await s.fire({icon:"success",title:"Deleted",text:"Notification has been deleted.",confirmButtonColor:"#10B981",timer:2e3}),n.data}catch(t){throw console.error("Error deleting notification:",t),t}}async getUnreadNotificationCount(){try{return(await a.get("/api/notifications/unread-count")).data}catch(e){throw console.error("Error fetching unread notification count:",e),e}}async getRecentNotifications(){try{return(await a.get("/api/notifications/recent")).data}catch(e){throw console.error("Error fetching recent notifications:",e),e}}async sendMessage(e){var t,n;try{return await s.fire({icon:"success",title:"Message Sent!",text:"Your message has been sent successfully. We will get back to you soon.",confirmButtonColor:"#10B981",timer:3e3}),{success:!0,message:"Message sent successfully"}}catch(o){const r=((n=(t=o.response)==null?void 0:t.data)==null?void 0:n.message)||"Failed to send message.";throw await s.fire({icon:"error",title:"Message Failed",text:r,confirmButtonColor:"#EF4444"}),o}}async submitFeedback(e){var t,n;try{return await s.fire({icon:"success",title:"Thank You!",text:"Your feedback has been submitted successfully. We appreciate your input.",confirmButtonColor:"#10B981",timer:3e3}),{success:!0,message:"Feedback submitted successfully"}}catch(o){const r=((n=(t=o.response)==null?void 0:t.data)==null?void 0:n.message)||"Failed to submit feedback.";throw await s.fire({icon:"error",title:"Submission Failed",text:r,confirmButtonColor:"#EF4444"}),o}}async getCurrentUser(){try{return(await a.get("/api/users/me")).data}catch(e){throw console.error("Error fetching current user:",e),e}}async getSystemStatus(){try{return(await a.get("/api/system/status")).data}catch(e){throw console.error("Error fetching system status:",e),e}}async getEmergencyContacts(){try{return{emergency_phone:"911",clinic_emergency:"(555) 123-4567",after_hours:"(555) 123-4568"}}catch(e){throw console.error("Error fetching emergency contacts:",e),e}}async requestEmergencyAppointment(e){var t,n;try{if(!(await s.fire({icon:"warning",title:"Emergency Appointment Request",text:"Are you experiencing a dental emergency? We will prioritize your request and contact you as soon as possible.",showCancelButton:!0,confirmButtonColor:"#EF4444",cancelButtonColor:"#6B7280",confirmButtonText:"Yes, this is an emergency",cancelButtonText:"Cancel"})).isConfirmed)return null;const r=await a.post("/appointments",{...e,priority:"emergency",status:"emergency_request",notes:"EMERGENCY APPOINTMENT REQUEST"});return await s.fire({icon:"info",title:"Emergency Request Submitted",text:"Your emergency appointment request has been submitted. We will contact you immediately to arrange urgent care.",confirmButtonColor:"#EF4444",timer:5e3}),r.data}catch(o){const r=((n=(t=o.response)==null?void 0:t.data)==null?void 0:n.message)||"Failed to submit emergency request.";throw await s.fire({icon:"error",title:"Request Failed",text:r,confirmButtonColor:"#EF4444"}),o}}}const w=new m;export{w as a};
